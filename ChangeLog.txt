14:43 2007-3-22
	过春节,换工作,最近没有时间做更新了.

2007-01-18 19:45
	将FTP下载修改为新的文件分块机制了。
	
2007-1-7 14:05
	修改RTSP播放流保存机制，分文件保存，使用新公式从文件的数据偏移计算播放时间开始偏移
	
	total_data_length    total_package_count     total_timestamp_count
	-----------------  = -------------------- = -----------------------
	start_data_offset    start_packet_number     start_timestamp_point
	
2007-1-4 23:41
	RTSPRetriver类修改，现在能够多线程下载，下载下来的媒体文件稍稍有点问题，如无法正常显示播放时间，
	可能还有媒体文件下载不完全的问题。 还有待进一步修改。
	添加了一个libhttpd库，希望以后有用吧，也算做个备份。

2006-12-30 1:26
	去掉BaseRetriver基类中一个mTotalLength成员变量
	修改HTTP任务分割机制。
	
2006-12-22 16:14
	单线程MMS下载差不多了。现在的问题是索引做的是不是有问题，播放时播放速度与原文件反应速度不一样。
	文件中索引大小不一样，这一规则是什么呢，现在考虑可能有两种，第一，每隔几个媒体包做一个索引，
	第二是对每个不同大小的文件做同样多的索引。
	
2006-12-18 22:56
	将任务及线程块所用的Model替换为新的使用数据的Model。并把model的位置从任务对象中移出来，
	即使任务没有启动，任务的数据model 也可以照样存在。但这引起一个问题，这两者的对应关系需要处理。
	

2006-12-17 11:07
	做了一些代码重构。功能上没有什么修改和改进，这是下一步要做的。

2006-12-13 15:10
	(已经修正了IP地址使用QHostInfo::fromName无法解析的问题，但这个URL显示程序还有问题，CPU使用率过高，
	问题在：if(!sock->waitForReadyRead(readTimeout*1000))	//读取出错一个区域内。
	错误处理不健全所致,暂时在重试之前等待1秒，防止CPU使用率过高)
	http://218.90.147.70/EverMore/EIOffice2007/EIO2007_Trial_SV_ZH_Lin.tar.gz
	即使使用了上面的处理，还是有CPU使用率达到98%的严重问题。还没有找到在哪里。
	
	修改分类模型类为使用Sqlite的树模型，这是通过分类及父分类的二维关系表构造树状数据结构的方法。在web的无限级分类中常用。
	现在这个还是只读取的。对于多列模型，可用视图类中的树视图的设置列隐藏属性的方法显示或者隐藏可选择的列。

2006-12-10 17:04
	添加一个Qt示例中的新窗口风格。
	修改了几个图标。
	
2006-12-9 18:02
	修改爲動態語言切換，並且在初始化的時候還能夠檢測到当前的环境，如果是我们支持的语言就加载相应的语言。否则就加载默认语言。
	修改了切换用户界面风格的代码。代码更简化有效。
	在VC工程资源NullGet.rc文件中把版本号设置为1.2.0-alpha，在.pro文件中修改版本号为1.2.0-alpha
	在VC中，资源文件NullGet.res 是通过NullGet.rc生成的。所有如果需要更新则把该文件删除，在编译就可。
	修改了任务图形化进度显示，使用绘图梯度及抗钜齿功能、图形显示更精致。
	
2006-11-26 18:02 -- 
	翻译qt 4 C++ GUI 编程
	
2006-9-25 11:43下午
		修正音乐下载中文显示问题。
		补充网站遍历操作控制功能。
		
2006-9-24 02:36下午
	修正BAIDU搜索出来的URL是假的错误，必须再进一步向百度发送一次请求将这个假的URL解密出来。
	
2006-9-23 12:56上午
	RTSP多线程支持框架，还有一些细节有问题。应该数据下载完成了，但没有正常退出。
	将原来整站下载部分改为一个小窗口方式，将原来的异步SOCKET改为多线程加阻塞SOCKET模式。
	修正HTML解析函数对多线程支持的缺陷。
	
2006-9-21 09:45下午
	加入RTSP会话的keepalive功能，能够在使用单一线程时下载完整的媒体文件。
	下载的文件较原文件小一点，可能是我的这个媒体文件中间有问题，日志显示有几个无法识别的字节被删除掉了。
	多线程控制的步骤说明及算法描述。
	下一步，如果正常检测媒体流的结束，如何多线程下载，如何实现多线程断点下载。
	
2006-9-20 10:56下午
	修改打开文件功能，打开目标文件夹功能。更可靠。
	修正librtsp关闭win socket不正确的BUG。
	
2006-9-19 08:19下午
	在搞定RTSP，MMS下载前不加入新功能。

2006-9-14 12:44下午
	添加MP3搜索移动到任务列的功能。应该可以正常执行MP3的下载。
	加入skype模块的一些基本功能操作。还没有实现完全。
	修正在主窗口隐藏的时候，如果再显示一个对话框，然后无论是关闭、接受或拒绝都会使主程序退出。的BUG。
	
2006-9-13 12:43下午
	修正任务表格的菜单不能连接弹出来，必须先左击其他控制才能再次弹出的BUG。
	修改几个小问题。
	加入了部分汉化文字功能。
	修正在选择不同的分类模型时有显示不了模型数据、有时选择一个任务的时候可能显示不了线程模型的BUG。
	
2006-9-12 09:40上午
	升级QT到4.2.0-rc1,修改systayicon无法退出的问题。
	添加音乐搜索的一部分。
	修正在没有任务的时候或者线程列表区为空时，点击线程列表区的启动(start)线程时导致程序崩溃的BUG。
	修正系统图标栏的图标无法正常退出的BUG。
	
2006-9-4 10:08下午
	修改一个在添加HTTPS时引入的处理不同scheme的错误。

2006-9-3 12:57下午
	单一文件下载HTTPS协议添加支持。
		测试URL：https://192.168.0.16/httpd-2.0.54.tar.bz2
							https://192.168.0.16/10.RM
	Qt的HostLookup 好象不能处理局域网IP地址的情况。判断当前的主机名如果是一个点分10进制IP地址，则不使用解析出来的数据。	

2006-9-2 03:54下午
	添加任务球状进度表示图。图的大小及颜色还有待修改。
	
2006-9-1 10:58下午
	完善浮动窗口，添加任务完成状态的轮流显示功能。修改背景及边框使得窗口稍微美观了一点。

2006-8-27 9:28
	修改了一个从剪贴板拿URL的检测，检测更准确。
	修改整站下载逻辑，可以恢复原有的下载，可以任意时刻执行停止启动等操作。
	
2006-8-26 22:26
	添加一个主TOOLBAR和一个用户画速率柱状图的TOOLBAR。这样加到TOOLBAR的是标准菜单项，比原来自己写的按钮更好控制一些。
	添加控制最大同时运行任务的限制的实现。还没有完全测试。不过应该没有什么大问题。
	加入工具栏按钮的几个图标，操作更直观一点。

2006-8-25 21:24
	修改一个解析FTP　LIST返回列表过长导致程序崩溃的问题。
	整站下载空位置画了一个像雷达扫描的图形，给程序添加了有意思的成分。
	在我写的字符串拷贝语句曾经出现过一次错误。(使用库函数解决，不理VS的警告）
	
2006-8-24 21:31
	修改一个从HTTP链接重定向到一个FTP或者其他链接不能正常下载的问题。(清理原有线程句柄，重新创建新的下载句柄)
	给整站下载添加一个简单的统计信息。
	LOG树数据条目多的时候容易出现操作迟缓。(现在的调试需要大量日志，因而不能通过减少日志的办法来解决该问题)
	
20:28 2006-8-23
	添加处理系统托盘的双击显示与隐藏主窗口的功能。添加处理用户点击右上角的X是隐藏主窗口的功能。添加用户退出提示功能。
	添加任务完成后的系统托盘消息通知功能。
	添加任务即时速度柱状图显示构件。在TOOLBAR最右侧的位置。即时速度图。在工具栏和浮动框中。(2006-8-24 22:38 工具栏中的图已经画出，感觉还不错)
	添加整站下载暂停，保存状态框架接口。

20:12 2006-8-22
	FTP下载过程有可能出现GUI的假死现象，CPU占用率非常高。( 日志量太大，TreeView处理过复杂导致，合理清理已经日志的方式处理 ) 
	FTP读取服务器返回的等待不合理，应该是QT读取函数readAll()有问题。FTP与服务器交互信息没有表现在UI log上。
	修改打开已经下载的文件只能打开第一个的问题。
22:12 2006-8-21
	修正FTP的PASSV(LIST 和 RETR两处PASV)的时候可导致程序崩溃,在发送FTP命令时，如果服务器断开连接或者网络断线，导致程序没有响应甚至崩溃的问题。
	
2006-8-10 19:53
		修改一个打开下载完成的任务时程序崩溃的问题。原因是将下载完成的任务放在另一个不同的队列中，造成访问NULL指针的错误。
		添加将任务中的URL放到剪贴板的方法。
		添加整站下载的用户输入框。

2006-8-5 17:22
	添加从页面导入URL的前半部分功能。
	添加从页面导入URL的后半部分功能。该模块可以正常使用了。

2006-8-4 12:17
	添加全局任务速度控制的有效支持。现在的控制速度是对每一个线程进行的设置。

2006-8-3 0:44
	修改FTP读取命令反馈消息方式，使得读取比原来的方式更有效率。
	修改几个命令发送与读取不对称导致读一个不可读socket而阻塞的问题。

2006-7-29 11:57
	添加rtsp协议
	rtsp://localhost/10.rm
	
2006-7-22 15:14
	添加file协议拷贝功能。
	d:/serv/www/mtv.wmv
	d:/serv/www/ngt/eclipse-SDK-3.1-win32.zip
	
2006-7-14 20:27
		ftp://mwuser:123456@localhost/mtv.wmv
		ftp://mwuser:123456@localhost/v3-tompay-www.rar
		
2006-7-13 21:49
	测试用例：
		http://localhost/v3-tompay-www.rar
		http://localhost/ngt/eclipse-SDK-3.1-win32.zip?abcd=eeee
		http://localhost/mtv.wmv?asdksdf=sdfjisf8&ksdfiu=i8sdf#lksdfiisdf
		重定向测试：http://localhost/info3.php	定向到FTP协议
		
2006-7-12 20:37
	修改了读取头不完整的错误，采用了一种效率比较低的方法，每次读取一个字节，但这样总比出现错误，不稳定的好。
	修改了对任务列表的保存出现重复记录的问题，有不知道是XML库的问题，还是怎么回事。用它提供的ElementByTag会有取不出来的元素。
	对耗时的计算不正确，应该是在运行状态总用时，而不是从创建开始到现在的用时，因为可能中间暂停了。
	对于读取中断，FG则重新连接重试。


##############################
问题列表：
		整站下载有问题啊，应该是URL列表站用的内存太大，可以考虑结合数据库和HASH值还记录下载过的URL。
		现在没有检查重复任务的功能。
		无法连接主机的错误无法正常捕捉并显示在任务的状态列中。
		HTTP，FTP，在处理有限连接支持的服务器上时不能完整下载。如不连接第二个数据端口时。(经过修改测试，好象没有问题了)
		搜索音乐不的关键字中文支持有问题。现在音乐搜索出来的链接地址是加密了的，无法正确找到媒体源路径，必须再做一步访问操作才能取到真正的下载地址。
		FTP在不断的停止，启动任务的时候，或者网络不稳定的时候，容易出现下载的数据错误的情况，使的文件不完整错误。
		在处理多IP主机上还有问题。 http://files.rarlab.com/rar/unrarsrc-3.3.4.tar.gz
		如果在选择了一个线程模型时会导致程序崩溃、???		
		
		如果程序有保存的以前的任务列表，则启动时加载了该列表，如果再启动这个重装载的任务，将导致程序崩溃。
		整站程序中需要处理URL后面带fregment的情况，因为这样会重复下载同一个页面，浪费时间及资源。(这个改过了，回来可以测试一下这功能是否完成。)
		rtsp 单线程下载基本能用。但下载下来的文件在用mplayerc播放的时候有明显的搜索进度，不知道是什么原因。可能文件有不对的地方，但播放看起来没有什么问题。
		rtsp://localhost/10.rm
		rtsp://localhost/hot_dance.rm
		下载字节：46.1 MB (48,369,194 字节)		5.13 MB (5,385,616 字节)
		实际字节：46.1 MB (48,382,627 字节)		5.13 MB (5,386,240 字节)
		19-Sep-2006 22:59:27.UNKNOWN tmplgpln(1804): RTSP session timed out, session ID <7590-1>
		
未完成的部分：
		2006-12-10 0:21		把配置数据库和任务数据修改为sqlite数据库，不用现在的XML。顺便用下数据库模块。
		像整站下载部分，可以给用户设置运行优先级的功能，实现只需要将线程运行优先级设置一下就可以了。 
		
		悬浮窗口的拖放功能。
		对搜索功能，我们自己做一个网站，在上面对其他的搜索结果做包装，可以统一客户端格式分析。把其他的工作都放在页面上来完成。
			这样还能统一包括音乐、图片、软件、游戏等的搜索。
		对cookie 处理。对代理服务器的支持。
		单一文件下载：进一步完善程序的稳定性。
		
		考虑即分配磁盘的功能。防止下载一半磁盘空间不足。
		处理HTTPS的功能呀!!!!!!!!!(完成单一文件HTTS下载，整站下载还没有完成。)
		可控制的任务队列数，同时运行的任务队列数支持。(完成了)
		对RTSP下载完成后的文件合并 。这个只需要将数据向一个文件中写就不需要了，尽量使用算法实现向单一文件写。
		//对下载分类的良好支持。(2006-8-10 19:56已经搞定了)
		发现一个浏览器可以下载，但该软件无法下载的问题，可能由于是reference的问题。
		发现	qnetworkinterface.h	
					#ifndef QT_NO_DEBUG_STREAM
					//Q_NETWORK_EXPORT QDebug operator<<(QDebug debug, const QNetworkInterface &interface);
					#endif
		加入一个模块用来与我们的服务器(现在可能只是个简单的web服务器)通信。需要考虑加密功能。或者是签名功能。
		在什么时候执行关机。
		
############################
	一些想法：
		QX11Embeded... 在UNIX上可以实现嵌入其他程序的功能，这个可以做播放器嵌入的基础。
		在Windows上面,准备使用MPC作为通用播放器。

任务及线程模型以模型数据为准，而任务运行实例及线程实例都是基于模型数据的，所以在任何暂停，重新加载
或者错误的时候，任务的运行实例及线程运行实例都将被销毁，而在重新启动的时候再次创建，这更体现线程的智能性，
动态性。而数据库只存储原始数据，显示成什么样子都由在Model的data中实现。也就是说没有模型的存在则不能有运行线程的存在。
把所有数据放在一个数据库中会不会好一点。不用打开那么多的库。
关于文件分块机制：

对于模型存储，现在的模型中的数据存储太复杂，效率低下，应该修改为自定义数据类型以提高效率。

content Length: 5764005 totalStamp: 209532 totalPacket: 10855 avg_bit_rate: 220073 avg_packet_size: 531 index_offset: 0 data_offset:397 num_streams: 2 preroll: 2483 flags: 2

content Length: 5764005 totalStamp: 209532 totalPacket: 10855 avg_bit_rate: 220073 avg_packet_size: 531 index_offset: 0 data_offset:397 num_streams: 2 preroll: 2483 flags: 2

content Length: 5764005 totalStamp: 209532 totalPacket: 10855 avg_bit_rate: 220073 avg_packet_size: 531 index_offset: 0 data_offset:397 num_streams: 2 preroll: 2483 flags: 2

原则，包可以有重复，但不能少包。
RTSP 多线程下载文件偏移量计算： seg_data_start
//segid * ( filelengh/this->mTaskOption->segmentCount ) + data_offset 
0		( startoffset + gotlength) + data_offset  线程0要写入头。写入头在文件偏移为0的位置。数据写入从seg_data_start开始写起。
1		avg_packet_size * ( startoffset%avg_packet_size ==0 ? (startoffset/avg_packet_size) : (1+startoffset/avg_packet_size) )*agv_packet_size + data_offset
其他线程同1

stream流timestamp下载偏移量: seg_stream_start 	记录在下载文件中 。
如果非刚开始下载，则从文件中读取这个值。
如果刚开始下载，则计算如下：
0		startstamp = 0.0   无可非议
1		(startoffset+gotlength)/avg_packet_size

下载完成的标志：
如果是最后一个线程，则直到流中无数据并且当前的timestamp与总的timestamp相差不超过100。
如果不是最后一个线程，则
0 . 下载的数据大于等于需要下载的数量，即成员totalLength的值。
在检测到这些条件的时刻，将下载值圆整到所理论上应该取的值，如下载字节，发送字节等。

对于MMS协议，在v1.0版本中包长度是固定的，最大包长度=最小包长度=平均包长度。
而所用的MMS协议库指定下载开始点是以包计的，所以我们可以根据这一特征指定下载的数据
存储在媒体文件中的位置。具体实现见296版本 的mmsretriver.cpp 文件。要注意的是在分割完文件后
我们要对这个值以包长度为单位进行圆整。
另一个要明白的是对于不足固定长度的包在所用的库中已经有补齐。
对于MMS协议处理的媒体文件，如asf,wmv等，需要有索引对象才能在播放的时候执行拖放，否则无法支持拖放
功能，而这个索引对象的数据并不是从服务器上下载下来的，需要在获取数据时自己抽取。这个抽取操作对
分块下载来说还不太好办。可能需要在下载完成后从读取一遍媒体文件抽取出索引再写入到媒体文件中。
stream_data_end_offset - stream_header_length = 所有数据包的总长度 


在控制块中，如果能检测到最后一块下载完成信号，需要对这个文件的内容进行重组，删除我们在下载过程中使用的临时值。
对这个流媒体，每个线程都不能帮助其他线程下载，因为还没有想到其他的控制方法。
判断是否是第一个或者最后一个线程的方法不应该是线程号，而应该通过起始值及总的需要下载的字节数来判断，
这样不就解决了上面的的帮助其他线程下载数据的分块控制了吗？
现在在发送OPTIONS到服务器以保持会话的活动状态时，会因为读取不完善造成丢失几个字节的东西。

/**
 * 对于这种特殊的按时间播放的RTSP媒体流，我们可以使用两种方法实现断点续传功能：
 * 第一，把每次执行play后的媒体数据放在一个单独的文件中，这样在完成是对该任务将出现多个媒体数据块文件，每个文件
 *		中包括整个媒体文件数据的一部分数据。最后把这些文件再合并成一个文件即可。
 * 第二，把所有的执行play后的媒体数据放在一个单独的文件中。这有个难点，断点续传时，每次重新play后很难找到该在文件的
 *		什么偏移量处开始写文件，现在就是遇到这个文件无法继续下去。
 *
 * 在最近两天的研究中，也不是没有收获，我想可以实现一个简单的rm文件头信息，比如版权，作者等，还有现在已经
 * 可以遍历rm文件的数据包了。具体信息见rmffReader函数。这就可以写一个小工具了。
 */

#################
特殊测试用URL：



#####################
参考文档(书籍):
Qt manual 4.1 , 4.2 
Java 与 模式
Qt 4 C++ GUI 用户界面编程
RFC 2326	Real Time Streaming Protocol (RTSP)
RFC2327   SDP: Session Description Protocol
Appendix E_ RealMedia File Format (RMFF) Reference
Microsoft RTSP Streaming Protocol  http://sdp.ppona.com
MMS streaming protocol  http://get.to/sdp
Advanced Systems Format (ASF) - Document Revision 01.13.00e - 6／9／2006  microsoft.com
